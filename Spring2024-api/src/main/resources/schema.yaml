openapi: 3.0.1
info:
  title: Employee API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /department/list:
    get:
      summary: Get all departments
      operationId: getDepartments
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
  /employee:
    post:
      summary: Create a new employee
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployee'
      responses:
        '201':
          description: Created         
          content:
            text/plain:
              schema:
                type: string
          headers:
            Location:
              schema:
                type: string
                format: uri
                description: The location of the newly created employee resource
        '400':
          description: Bad Request       
          content:
            text/plain:
              schema:
                type: string
                        
  /employee/{employeeId}:
    get:
      summary: Get employee by id
      operationId: getById
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the employee to retrieve    
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Not Found
  /employee/search:
    get:
      summary: Search employees
      operationId: search
      parameters:
        - name: id
          in: query
          required: false
          schema: 
            type: integer
            format: int64
        - name: firstName
          in: query
          required: false
          schema: 
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
        - name: birthDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: birthDateTo
          in: query
          required: false
          schema:
            type: string
            format: date   
        - name: gender
          in: query
          required: false
          schema:
            type: string
            enum: 
              - F
              - M
      responses: 
        '200':
          description: List of employees
          content: 
            application/json: 
              schema: 
                type: array
                items: 
                   $ref: '#/components/schemas/Employee'
  /employee/searchInDepartments:
    get:
      summary: Search employees
      operationId: searchInDepartments
      parameters:
        - name: id
          in: query
          required: false
          schema: 
            type: integer
            format: int64
        - name: firstName
          in: query
          required: false
          schema: 
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
        - name: birthDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: birthDateTo
          in: query
          required: false
          schema:
            type: string
            format: date   
        - name: gender
          in: query
          required: false
          schema:
            type: string
            enum: 
              - F
              - M
        - name: departmentIds
          in: query
          required: true
          schema: 
            type: array
            items: 
              type: string
        - name: page_number
          in: query
          required: true
          schema:
            type: integer              
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
        - name: sort_field
          in: query
          required: false
          schema: 
            type: string
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses: 
        '200':
          description: List of employees
          content: 
            application/json: 
              schema: 
                type: array
                items: 
                   $ref: '#/components/schemas/Employee'
components:
  schemas:
    CreateEmployee:
      allOf: 
        - $ref: '#/components/schemas/Employee'
      type: object
      properties:
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
        departmentId:
          type: string  
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64          
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        birthDate:
          type: string
          format: date
          example: "1990-10-21"
        hireDate: 
          type: string
          format: date
        gender:
          type: string      
      required: 
        - firstName
        - lastName
        - birthDate
        - hireDate
    Department:
      type: object
      properties:
        id:
          type: string
        deptName:
          type: string
     